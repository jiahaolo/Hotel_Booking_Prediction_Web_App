"""
Unit tests for the evaluate module.
"""
import pickle
import pytest

import pandas as pd
from sklearn.metrics import accuracy_score, roc_auc_score, f1_score
from src.evaluate import score_model, evaluate_model


X_test = pd.DataFrame({'hotel': {0: 0,
  1: 0,
  2: 1,
  3: 1,
  4: 1,
  5: 1,
  6: 0,
  7: 1,
  8: 0,
  9: 0,
  10: 1,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 1,
  18: 0,
  19: 0},
 'lead_time': {0: 5.627621113690637,
  1: 4.330733340286331,
  2: 1.0986122886681098,
  3: 3.970291913552122,
  4: 1.3862943611198906,
  5: 5.2574953720277815,
  6: 3.951243718581428,
  7: 2.995732273553991,
  8: 4.454347296253507,
  9: 6.139884552226255,
  10: 3.713572066704308,
  11: 4.442651256490317,
  12: 3.295836866004329,
  13: 5.455321115357702,
  14: 4.219507705176107,
  15: 3.610917912644224,
  16: 5.429345628954441,
  17: 2.995732273553991,
  18: 3.218875824868201,
  19: 2.70805020110221},
 'arrival_date_week_number': {0: 3.367295829986474,
  1: 2.6390573296152584,
  2: 2.833213344056216,
  3: 3.49650756146648,
  4: 2.3978952727983707,
  5: 3.1354942159291497,
  6: 3.688879454113936,
  7: 3.610917912644224,
  8: 3.295836866004329,
  9: 3.4339872044851463,
  10: 2.772588722239781,
  11: 2.079441541679836,
  12: 3.970291913552122,
  13: 3.5263605246161616,
  14: 3.1354942159291497,
  15: 1.6094379124341005,
  16: 2.8903717578961645,
  17: 2.995732273553991,
  18: 3.332204510175204,
  19: 3.295836866004329},
 'arrival_date_day_of_month': {0: 2.6390573296152584,
  1: 3.4011973816621555,
  2: 2.70805020110221,
  3: 1.9459101490553128,
  4: 1.6094379124341005,
  5: 3.1780538303479458,
  6: 2.9444389791664403,
  7: 0.6931471805599453,
  8: 3.091042453358316,
  9: 3.218875824868201,
  10: 2.6390573296152584,
  11: 2.6390573296152584,
  12: 3.091042453358316,
  13: 2.4849066497880004,
  14: 3.367295829986474,
  15: 3.367295829986474,
  16: 3.1780538303479458,
  17: 1.6094379124341005,
  18: 3.332204510175204,
  19: 3.367295829986474},
 'stays_in_weekend_nights': {0: 0,
  1: 0,
  2: 0,
  3: 1,
  4: 0,
  5: 3,
  6: 2,
  7: 0,
  8: 0,
  9: 1,
  10: 0,
  11: 1,
  12: 1,
  13: 0,
  14: 2,
  15: 2,
  16: 2,
  17: 2,
  18: 1,
  19: 0},
 'stays_in_week_nights': {0: 2,
  1: 4,
  2: 1,
  3: 3,
  4: 2,
  5: 7,
  6: 3,
  7: 2,
  8: 2,
  9: 4,
  10: 3,
  11: 2,
  12: 4,
  13: 2,
  14: 5,
  15: 5,
  16: 5,
  17: 4,
  18: 0,
  19: 1},
 'adults': {0: 2,
  1: 2,
  2: 1,
  3: 2,
  4: 2,
  5: 2,
  6: 2,
  7: 2,
  8: 2,
  9: 2,
  10: 2,
  11: 2,
  12: 1,
  13: 2,
  14: 2,
  15: 3,
  16: 2,
  17: 2,
  18: 2,
  19: 2},
 'children': {0: 0.0,
  1: 0.0,
  2: 0.0,
  3: 0.0,
  4: 1.0,
  5: 0.0,
  6: 0.0,
  7: 0.0,
  8: 0.0,
  9: 0.0,
  10: 2.0,
  11: 0.0,
  12: 0.0,
  13: 0.0,
  14: 0.0,
  15: 0.0,
  16: 0.0,
  17: 0.0,
  18: 0.0,
  19: 0.0},
 'babies': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 0,
  8: 0,
  9: 0,
  10: 0,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'meal': {0: 3,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 2,
  8: 3,
  9: 0,
  10: 2,
  11: 0,
  12: 2,
  13: 0,
  14: 0,
  15: 2,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'market_segment': {0: 6,
  1: 6,
  2: 2,
  3: 3,
  4: 6,
  5: 5,
  6: 6,
  7: 3,
  8: 6,
  9: 5,
  10: 6,
  11: 6,
  12: 6,
  13: 6,
  14: 5,
  15: 6,
  16: 6,
  17: 6,
  18: 6,
  19: 3},
 'distribution_channel': {0: 3,
  1: 3,
  2: 0,
  3: 1,
  4: 3,
  5: 3,
  6: 3,
  7: 1,
  8: 3,
  9: 3,
  10: 3,
  11: 3,
  12: 3,
  13: 3,
  14: 3,
  15: 3,
  16: 3,
  17: 3,
  18: 3,
  19: 1},
 'is_repeated_guest': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 0,
  8: 0,
  9: 0,
  10: 0,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'previous_cancellations': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 0,
  8: 0,
  9: 0,
  10: 0,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'previous_bookings_not_canceled': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 0,
  8: 0,
  9: 0,
  10: 0,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'reserved_room_type': {0: 0,
  1: 0,
  2: 0,
  3: 4,
  4: 0,
  5: 4,
  6: 3,
  7: 4,
  8: 0,
  9: 0,
  10: 2,
  11: 0,
  12: 0,
  13: 1,
  14: 0,
  15: 4,
  16: 3,
  17: 3,
  18: 3,
  19: 3},
 'deposit_type': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 0,
  8: 0,
  9: 0,
  10: 0,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'agent': {0: 2.302585092994046,
  1: 2.302585092994046,
  2: 0.0,
  3: 5.525452939131784,
  4: 5.493061443340548,
  5: 5.752572638825633,
  6: 2.302585092994046,
  7: 0.0,
  8: 2.19722457733622,
  9: 5.438079308923196,
  10: 5.484796933490655,
  11: 2.079441541679836,
  12: 4.430816798843313,
  13: 2.302585092994046,
  14: 5.572154032177765,
  15: 2.302585092994046,
  16: 2.302585092994046,
  17: 5.484796933490655,
  18: 2.302585092994046,
  19: 2.70805020110221},
 'company': {0: 0.0,
  1: 0.0,
  2: 2.5649493574615367,
  3: 0.0,
  4: 0.0,
  5: 0.0,
  6: 0.0,
  7: 0.0,
  8: 0.0,
  9: 0.0,
  10: 0.0,
  11: 0.0,
  12: 0.0,
  13: 0.0,
  14: 0.0,
  15: 0.0,
  16: 0.0,
  17: 0.0,
  18: 0.0,
  19: 0.0},
 'customer_type': {0: 2,
  1: 2,
  2: 2,
  3: 2,
  4: 2,
  5: 2,
  6: 2,
  7: 2,
  8: 2,
  9: 3,
  10: 2,
  11: 2,
  12: 2,
  13: 2,
  14: 2,
  15: 2,
  16: 2,
  17: 2,
  18: 2,
  19: 2},
 'adr': {0: 4.500920164614292,
  1: 4.596129441335942,
  2: 3.7612001156935615,
  3: 5.159055299214529,
  4: 4.248495242049359,
  5: 4.188745237643585,
  6: 5.01329841151574,
  7: 5.176149732573829,
  8: 4.763028270603671,
  9: 4.650143551630823,
  10: 5.267858159063328,
  11: 4.291417885803126,
  12: 4.393461012299545,
  13: 4.473009282385752,
  14: 4.500920164614292,
  15: 4.989343558628634,
  16: 4.879006851617819,
  17: 4.51085950651685,
  18: 5.117993812416755,
  19: 4.7808027546312495},
 'required_car_parking_spaces': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 1,
  5: 0,
  6: 0,
  7: 1,
  8: 0,
  9: 0,
  10: 0,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 0,
  16: 0,
  17: 0,
  18: 0,
  19: 0},
 'total_of_special_requests': {0: 2,
  1: 2,
  2: 0,
  3: 0,
  4: 2,
  5: 1,
  6: 1,
  7: 3,
  8: 1,
  9: 1,
  10: 1,
  11: 0,
  12: 0,
  13: 0,
  14: 0,
  15: 1,
  16: 2,
  17: 1,
  18: 0,
  19: 0},
 'year': {0: 3,
  1: 3,
  2: 2,
  3: 1,
  4: 2,
  5: 2,
  6: 2,
  7: 1,
  8: 2,
  9: 3,
  10: 3,
  11: 2,
  12: 2,
  13: 2,
  14: 3,
  15: 2,
  16: 2,
  17: 2,
  18: 2,
  19: 3},
 'month': {0: 7,
  1: 4,
  2: 4,
  3: 8,
  4: 3,
  5: 6,
  6: 9,
  7: 9,
  8: 6,
  9: 7,
  10: 3,
  11: 11,
  12: 12,
  13: 1,
  14: 3,
  15: 12,
  16: 10,
  17: 4,
  18: 6,
  19: 6},
 'day': {0: 15,
  1: 2,
  2: 15,
  3: 10,
  4: 6,
  5: 2,
  6: 23,
  7: 3,
  8: 23,
  9: 29,
  10: 9,
  11: 21,
  12: 12,
  13: 13,
  14: 28,
  15: 23,
  16: 6,
  17: 16,
  18: 8,
  19: 26},
 'weekday': {0: 5,
  1: 6,
  2: 4,
  3: 0,
  4: 6,
  5: 3,
  6: 4,
  7: 3,
  8: 3,
  9: 5,
  10: 3,
  11: 0,
  12: 0,
  13: 2,
  14: 1,
  15: 4,
  16: 3,
  17: 5,
  18: 2,
  19: 0}})

y_test = pd.DataFrame({'is_canceled': {0: 0,
  1: 0,
  2: 0,
  3: 0,
  4: 0,
  5: 0,
  6: 0,
  7: 0,
  8: 0,
  9: 0,
  10: 1,
  11: 1,
  12: 1,
  13: 1,
  14: 1,
  15: 1,
  16: 1,
  17: 1,
  18: 1,
  19: 1}})

initial_features = ['hotel',
                    'arrival_date_day_of_month',
                    'arrival_date_week_number',
                    'day',
                    'month',
                    'weekday',
                    'lead_time',
                    'stays_in_week_nights',
                    'stays_in_weekend_nights',
                    'total_of_special_requests',
                    'market_segment']

with open('models/dt_model.pkl', 'rb') as file_handle:
    dtree = pickle.load(file_handle)

ypred_proba_true = pd.DataFrame(dtree.predict_proba(X_test[initial_features])[:, 1])
ypred_true = pd.DataFrame(dtree.predict(X_test[initial_features]))
auc_true = roc_auc_score(y_test, ypred_proba_true)
accuracy_true = accuracy_score(y_test, ypred_true)
f1_score_true = f1_score(y_test, ypred_true)


def test_score_model():
    """
    Happy path: Tests the score_model function.
    """
    ypred_proba_out, ypred_bin_out = score_model(
        X_test, dtree, initial_features)
    assert ypred_proba_out.equals(ypred_proba_true)
    assert ypred_bin_out.equals(ypred_true)

def test_score_model_with_wrong_type():
    """
    Sad path: Tests the score_model function with wrong input type.
    """
    model_in = 'Not a model object'
    with pytest.raises(FileNotFoundError):
        score_model(X_test, model_in, initial_features)

def test_score_model_with_empty_dataframe():
    """
    Sad path: Tests the score_model function with empty dataframe.
    """
    df_empty = pd.DataFrame()
    with pytest.raises(KeyError):
        score_model(df_empty, dtree, initial_features)

def test_evaluate_model():
    """
    Happy path: Tests the evaluate_model function.
    """
    auc_out, accuracy_out, f1_score_out = evaluate_model(
        y_test, ypred_proba_true, ypred_true)

    assert auc_out == auc_true
    assert accuracy_out == accuracy_true
    assert f1_score_out == f1_score_true

def test_evaluate_model_with_single_type():
    """
    Sad path: Tests the evaluate_model function with wrong input type.
    """
    y_test_in = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    with pytest.raises(TypeError):
        evaluate_model(y_test_in, ypred_proba_true, ypred_true)

def test_evaluate_model_with_empty_dd():
    """
    Sad path: Tests the evaluate_model function with empty dataframe.
    """
    df_empty = pd.DataFrame()
    with pytest.raises(ValueError):
        evaluate_model(df_empty, ypred_proba_true, ypred_true)
